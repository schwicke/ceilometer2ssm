#!/usr/bin/python

"""
The module stores the information from ceilometer
to the database,for getting the data of the previous
day.It is done in 6 parts using a 4 hour time window.
It contacts the ceilometer by making use of
ceilodatapoll.py
"""

# All the Imports here
import sys
sys.path.insert(0, '/usr/lib64/python2.6/site-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg')

from datetime import date,datetime, timedelta
from cloudaccounting import api as db_api
import json
import logging
import os.path
import subprocess
import time
from cloudaccounting import landbquery # queries landb datbase
from cloudaccounting import hwdbquery  # queries hwdb database
import argparse
from caapi.populate_daily_resource_record import getHepSpecData,update_resource_record_day,update_resource_record
hep_spec_data_id={}# stores the serial number-hep_spec mappings
hep_spec_data_name = {} # stores the host name-hep_spec mappings

# reading the configuration file /etc/ceilodata.conf


def read_config():
    filename="/etc/ceilodata.conf"
    try:
        f = open(filename,"r")
        try:
            result= json.loads(f.read())
            f.close
            return result
        except:
            print >> sys.stderr, 'ERROR: Cannot parse configuration file ' + filename
            exit(1)
    except IOError:
        print >> sys.stderr, 'ERROR: Cannot open configuration file ' + filename
        exit(1)


# storing the resource data in the database
def store_sorted_resource_data(sorted_resource_data,start_time,end_time,lgr):
    #print "debug: store_sorted_resource_data called"
    #print json.dumps(sorted_resource_data, indent=2)
    db_api.create_session(mysql_url) # starts the database session
    for resource_id in sorted_resource_data.keys():
        cpu_metric_info={}
        cpu_resource_info={}
        instance_metric_info={}
        instance_resource_info={}
        net_in_metric_info={}
        net_in_resource_info={}
        net_out_metric_info={}
        net_out_resource_info={}
        try:
            cpu_resource_info=sorted_resource_data[resource_id]["cpu_resource_info"]
            cpu_metric_info=sorted_resource_data[resource_id]["cpu_metric_info"]
        except:
            pass
        try:
            instance_resource_info=sorted_resource_data[resource_id]["instance_resource_info"]
            instance_metric_info=sorted_resource_data[resource_id]["instance_metric_info"]
        except:
            pass
        try:
            net_in_resource_info=sorted_resource_data[resource_id]["net_in_resource_info"]
            net_in_metric_info=sorted_resource_data[resource_id]["net_in_metric_info"]
        except:
            pass
        try:
            net_out_resource_info=sorted_resource_data[resource_id]["net_out_resource_info"]
            net_out_metric_info=sorted_resource_data[resource_id]["net_out_metric_info"]
        except:
            pass
        
        #print "DEBUG: cpu debug starts here"
        #print "Resource_id="+resource_id
        #print json.dumps(cpu_metric_info, indent=2)
        #print json.dumps(cpu_resource_info,indent=2)
        #print "DEBUG: cpu debug ends here"
        for cpu_sample in cpu_metric_info:            
            db_api.store_data(cpu_resource_info,cpu_sample,start_time,end_time,lgr)
        for instance_sample in instance_metric_info:
            db_api.store_data(instance_resource_info,instance_sample,start_time,end_time,lgr)
        for net_in_sample in net_in_metric_info:
            db_api.store_data(net_in_resource_info,net_in_sample,start_time,end_time,lgr)
        for net_out_sample in net_out_metric_info:
            db_api.store_data(net_out_resource_info,net_out_sample,start_time,end_time,lgr)
    #lgr.debug("Updation of the database is over")
    db_api.shutdown_session()

# sorting the resource data
def get_sorted_resource_data(ceilo_data_per_tenant):
    sorted_resource_table={}
    resource_id_list=[]
    tenant_name_list=[]
    for tenant_id in ceilo_data_per_tenant.keys():
        ceilo_data_filtered=ceilo_data_per_tenant[tenant_id]
        cpu_info={}
        net_in_info={}
        net_out_info={}
        instance_info={}
        try:
            instance_info=ceilo_data_filtered["instance"]
        except:
            pass
        try:
            cpu_info=ceilo_data_filtered["cpu"]
        except:
            pass
        try:
            net_in_info=ceilo_data_filtered["net_in"]
        except:
            pass
        try:
            net_out_info=ceilo_data_filtered["net_out"]
        except:
            pass
        metric_list=[]
        if(cpu_info):
            for record_values in cpu_info:
                user_id = record_values[0]
                project_id = record_values[1]
                resource_id = record_values[2]
                node=record_values[3]
                host_name=record_values[4]
                display_name=record_values[5]
                vmuuid=record_values[6]
                instance_id=record_values[7]
                image_ref_url =record_values[8]
                state=record_values[9]
                vcpus=record_values[10]
                memory_mb=record_values[11]
                disk_gb=record_values[12]
                created_at = record_values[13]
                launched_at = record_values[14]
                deleted_at = record_values[15]
                terminated_at = record_values[16]
                counter_name = record_values[17]
                source = record_values[18]
                counter_unit = record_values[19]
                counter_volume = record_values[20]
                counter_type = record_values[21]
                sample_time = record_values[22]
                hep_spec=record_values[23]
                tenant_id=record_values[24]
                tenant_name=record_values[25]
                if vmuuid is None:
                    vmuuid=instance_id
                if display_name is not None:
                    host_name=display_name
                if vmuuid is None:
                    vmuuid=resource_id
                tmp_resource_info={}
                tmp_metric_info={}
                if "nova" in resource_id:
                    resource_id=vmuuid
                if user_id is not None or user_id !="":
                    tmp_resource_info["user_id"]=user_id
                if resource_id is not None or resource_id !="":
                    tmp_resource_info["resource_id"]=resource_id
                if project_id is not None or project_id !="":
                    tmp_resource_info["project_id"]=project_id
                if tenant_id is not None or tenant_id !="":
                    tmp_resource_info["tenant_id"]=tenant_id
                if tenant_name is not None or tenant_name !="":
                    tmp_resource_info["tenant_name"]=tenant_name
                if vmuuid is not None or vmuuid !="":
                    tmp_resource_info["vmuuid"]=resource_id
                if node is not None or node !="":
                    tmp_resource_info["node"]=node
                if host_name is not None or host_name !="":
                    tmp_resource_info["host_name"]=host_name
                if image_ref_url is not None or image_ref_url !="":
                    tmp_resource_info["image_ref_url"]=image_ref_url
                if state is not None or state !="":
                    tmp_resource_info["state"]=state
                if vcpus is not None or vcpus !="":
                    tmp_resource_info["vcpus"]=vcpus
                if memory_mb is not None or memory_mb !="":
                    tmp_resource_info["memory_mb"]=memory_mb
                if disk_gb is not None or disk_gb !="":
                    tmp_resource_info["disk_gb"]=disk_gb
                if hep_spec is not None or hep_spec !="":
                    tmp_resource_info["hep_spec"]=hep_spec
                if created_at is not None or created_at !="":
                    tmp_resource_info["created_at"]=created_at
                if launched_at is not None or launched_at !="":
                    tmp_resource_info["launched_at"]=launched_at
                if deleted_at is not None or deleted_at !="":
                    tmp_resource_info["deleted_at"]=deleted_at
                if terminated_at is not None or terminated_at !="":
                    tmp_resource_info["terminated_at"]=terminated_at
                if counter_name is not None and counter_name !="":
                    tmp_metric_info["counter_name"]=counter_name
                if counter_volume is not None and counter_volume !="":
                    tmp_metric_info["counter_volume"]=counter_volume
                if counter_type is not None and counter_type !="":
                    tmp_metric_info["counter_type"]=counter_type
                if counter_unit  is not None and counter_unit !="":
                    tmp_metric_info["counter_unit"]=counter_unit
                if source is not None and source !="":
                    tmp_metric_info["source"]=source
                if sample_time is not None and sample_time !="":
                    tmp_metric_info["sample_time"]=sample_time

                if (resource_id not in resource_id_list):
	            resource_id_list.append(resource_id)
                if(tenant_name not in tenant_name_list):
                    tenant_name_list.append(tenant_name)
                try:
                    sorted_resource_table[resource_id]
                    try:
                        sorted_resource_table[resource_id]["cpu_resource_info"]
                        metric_list= sorted_resource_table[resource_id]["cpu_metric_info"]
                        if tmp_metric_info not in  metric_list:
                            metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["cpu_metric_info"]=metric_list
                    except:
                        sorted_resource_table[resource_id]["cpu_resource_info"]=tmp_resource_info
                        metric_list=[]
                        metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["cpu_metric_info"]=metric_list
                except:
                    sorted_resource_table[resource_id]={}
                    sorted_resource_table[resource_id]["cpu_resource_info"]=tmp_resource_info
                    metric_list=[]
                    metric_list.append(tmp_metric_info)
                    sorted_resource_table[resource_id]["cpu_metric_info"]=metric_list
        if(instance_info):
            for record_values in instance_info:
                user_id = record_values[0]
                project_id = record_values[1]
                resource_id = record_values[2]
                node=record_values[3]
                host_name=record_values[4]
                display_name=record_values[5]
                vmuuid=record_values[6]
                instance_id=record_values[7]
                image_ref_url =record_values[8]
                state=record_values[9]
                vcpus=record_values[10]
                memory_mb=record_values[11]
                disk_gb=record_values[12]
                created_at = record_values[13]
                launched_at = record_values[14]
                deleted_at = record_values[15]
                terminated_at = record_values[16]
                counter_name = record_values[17]
                source = record_values[18]
                counter_unit = record_values[19]
                counter_volume = record_values[20]
                counter_type = record_values[21]
                sample_time = record_values[22]
                hep_spec=record_values[23]
                tenant_id=record_values[24]
                tenant_name=record_values[25]
                if vmuuid is None:
                    vmuuid=instance_id
                if display_name is not None:
                    host_name=display_name
                if vmuuid is None:
                    vmuuid=resource_id
                tmp_resource_info={}
                tmp_metric_info={}
                if "nova" in resource_id:
                    resource_id=vmuuid
                if user_id is not None or user_id !="":
                    tmp_resource_info["user_id"]=user_id
                if resource_id is not None or resource_id !="":
                    tmp_resource_info["resource_id"]=resource_id
                if project_id is not None or project_id !="":
                    tmp_resource_info["project_id"]=project_id
                if tenant_id is not None or tenant_id !="":
                    tmp_resource_info["tenant_id"]=tenant_id
                if tenant_name is not None or tenant_name !="":
                    tmp_resource_info["tenant_name"]=tenant_name
                if vmuuid is not None or vmuuid !="":
                    tmp_resource_info["vmuuid"]=resource_id
                if node is not None or node !="":
                    tmp_resource_info["node"]=node
                if host_name is not None or host_name !="":
                    tmp_resource_info["host_name"]=host_name
                if image_ref_url is not None or image_ref_url !="":
                    tmp_resource_info["image_ref_url"]=image_ref_url
                if state is not None or state !="":
                    tmp_resource_info["state"]=state
                if vcpus is not None or vcpus !="":
                    tmp_resource_info["vcpus"]=vcpus
                if memory_mb is not None or memory_mb !="":
                    tmp_resource_info["memory_mb"]=memory_mb
                if disk_gb is not None or disk_gb !="":
                    tmp_resource_info["disk_gb"]=disk_gb
                if hep_spec is not None or hep_spec !="":
                    tmp_resource_info["hep_spec"]=hep_spec
                if created_at is not None or created_at !="":
                    tmp_resource_info["created_at"]=created_at
                if launched_at is not None or launched_at !="":
                    tmp_resource_info["launched_at"]=launched_at
                if deleted_at is not None or deleted_at !="":
                    tmp_resource_info["deleted_at"]=deleted_at
                if terminated_at is not None or terminated_at !="":
                    tmp_resource_info["terminated_at"]=terminated_at
                if counter_name is not None and counter_name !="":
                    tmp_metric_info["counter_name"]=counter_name
                if counter_volume is not None and counter_volume !="":
                    tmp_metric_info["counter_volume"]=counter_volume
                if counter_type is not None and counter_type !="":
                    tmp_metric_info["counter_type"]=counter_type
                if counter_unit  is not None and counter_unit !="":
                    tmp_metric_info["counter_unit"]=counter_unit
                if source is not None and source !="":
                    tmp_metric_info["source"]=source
                if sample_time is not None and sample_time !="":
                    tmp_metric_info["sample_time"]=sample_time

                if (resource_id not in resource_id_list):
	            resource_id_list.append(resource_id)
                if(tenant_name not in tenant_name_list):
                    tenant_name_list.append(tenant_name)
                try:
                    sorted_resource_table[resource_id]
                    try:
                        sorted_resource_table[resource_id]["instance_resource_info"]
                        metric_list= sorted_resource_table[resource_id]["instance_metric_info"]
                        if tmp_metric_info not in  metric_list:
                            metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["instance_metric_info"]=metric_list
                    except:
                        sorted_resource_table[resource_id]["instance_resource_info"]=tmp_resource_info
                        metric_list=[]
                        metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["instance_metric_info"]=metric_list
                except:
                    sorted_resource_table[resource_id]={}
                    sorted_resource_table[resource_id]["instance_resource_info"]=tmp_resource_info
                    metric_list=[]
                    metric_list.append(tmp_metric_info)
                    sorted_resource_table[resource_id]["instance_metric_info"]=metric_list
        if(net_in_info):
            for record_values in net_in_info:
                user_id = record_values[0]
                project_id = record_values[1]
                resource_id = record_values[2]
                node=record_values[3]
                host_name=record_values[4]
                display_name=record_values[5]
                vmuuid=record_values[6]
                instance_id=record_values[7]
                image_ref_url =record_values[8]
                state=record_values[9]
                vcpus=record_values[10]
                memory_mb=record_values[11]
                disk_gb=record_values[12]
                created_at = record_values[13]
                launched_at = record_values[14]
                deleted_at = record_values[15]
                terminated_at = record_values[16]
                counter_name = record_values[17]
                source = record_values[18]
                counter_unit = record_values[19]
                counter_volume = record_values[20]
                counter_type = record_values[21]
                sample_time = record_values[22]

                hep_spec=record_values[23]
                tenant_id=record_values[24]
                tenant_name=record_values[25]
                if vmuuid is None:
                    vmuuid=instance_id
                if host_name is None:
                    host_name=display_name

                if vmuuid is None:
                    vmuuid=resource_id
                tmp_resource_info={}
                tmp_metric_info={}
                if "nova" in resource_id:
                    resource_id=vmuuid
                if user_id is not None or user_id !="":
                    tmp_resource_info["user_id"]=user_id
                if resource_id is not None or resource_id !="":
                    tmp_resource_info["resource_id"]=resource_id
                if project_id is not None or project_id !="":
                    tmp_resource_info["project_id"]=project_id
                if tenant_id is not None or tenant_id !="":
                    tmp_resource_info["tenant_id"]=tenant_id
                if tenant_name is not None or tenant_name !="":
                    tmp_resource_info["tenant_name"]=tenant_name
                if vmuuid is not None or vmuuid !="":
                    tmp_resource_info["vmuuid"]=resource_id
                if node is not None or node !="":
                    tmp_resource_info["node"]=node
                if host_name is not None or host_name !="":
                    tmp_resource_info["host_name"]=host_name
                if image_ref_url is not None or image_ref_url !="":
                    tmp_resource_info["image_ref_url"]=image_ref_url
                if state is not None or state !="":
                    tmp_resource_info["state"]=state
                if vcpus is not None or vcpus !="":
                    tmp_resource_info["vcpus"]=vcpus
                if memory_mb is not None or memory_mb !="":
                    tmp_resource_info["memory_mb"]=memory_mb
                if disk_gb is not None or disk_gb !="":
                    tmp_resource_info["disk_gb"]=disk_gb
                if hep_spec is not None or hep_spec !="":
                    tmp_resource_info["hep_spec"]=hep_spec
                if created_at is not None or created_at !="":
                    tmp_resource_info["created_at"]=created_at
                if launched_at is not None or launched_at !="":
                    tmp_resource_info["launched_at"]=launched_at
                if deleted_at is not None or deleted_at !="":
                    tmp_resource_info["deleted_at"]=deleted_at
                if terminated_at is not None or terminated_at !="":
                    tmp_resource_info["terminated_at"]=terminated_at
                if counter_name is not None and counter_name !="":
                    tmp_metric_info["counter_name"]=counter_name
                if counter_volume is not None and counter_volume !="":
                    tmp_metric_info["counter_volume"]=counter_volume
                if counter_type is not None and counter_type !="":
                    tmp_metric_info["counter_type"]=counter_type
                if counter_unit  is not None and counter_unit !="":
                    tmp_metric_info["counter_unit"]=counter_unit
                if source is not None and source !="":
                    tmp_metric_info["source"]=source
                if sample_time is not None and sample_time !="":
                    tmp_metric_info["sample_time"]=sample_time


                try:
                    sorted_resource_table[resource_id]
                    try:
                        sorted_resource_table[resource_id]["net_in_resource_info"]
                        metric_list= sorted_resource_table[resource_id]["net_in_metric_info"]
                        if tmp_metric_info not in  metric_list:
                            metric_list.append(tmp_metric_info) 
                        resource_id_table[resource_id]["net_in_metric_info"]=metric_list
                    except:
                        sorted_resource_table[resource_id]["net_in_resource_info"]=tmp_resource_info
                        metric_list=[]
                        metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["net_in_metric_info"]=metric_list
                except:
                    sorted_resource_table[resource_id]={}
                    sorted_resource_table[resource_id]["net_in_resource_info"]=tmp_resource_info
                    metric_list=[]
                    metric_list.append(tmp_metric_info)
                    sorted_resource_table[resource_id]["net_in_metric_info"]=metric_list
        if(net_out_info):
            for record_values in net_out_info:
                user_id = record_values[0]
                project_id = record_values[1]
                resource_id = record_values[2]
                node=record_values[3]
                host_name=record_values[4]
                display_name=record_values[5]
                vmuuid=record_values[6]
                instance_id=record_values[7]
                image_ref_url =record_values[8]
                state=record_values[9]
                vcpus=record_values[10]
                memory_mb=record_values[11]
                disk_gb=record_values[12]
                created_at = record_values[13]
                launched_at = record_values[14]
                deleted_at = record_values[15]
                terminated_at = record_values[16]
                counter_name = record_values[17]
                source = record_values[18]
                counter_unit = record_values[19]
                counter_volume = record_values[20]
                counter_type = record_values[21]
                sample_time = record_values[22]

                hep_spec=record_values[23]
                tenant_id=record_values[24]
                tenant_name=record_values[25]
                if vmuuid is None:
                    vmuuid=instance_id
                if host_name is None:
                    host_name=display_name

                if vmuuid is None:
                    vmuuid=resource_id
                tmp_resource_info={}
                tmp_metric_info={}
                if "nova" in resource_id:
                    resource_id=vmuuid
                if user_id is not None or user_id !="":
                    tmp_resource_info["user_id"]=user_id
                if resource_id is not None or resource_id !="":
                    tmp_resource_info["resource_id"]=resource_id
                if project_id is not None or project_id !="":
                    tmp_resource_info["project_id"]=project_id
                if tenant_id is not None or tenant_id !="":
                    tmp_resource_info["tenant_id"]=tenant_id
                if tenant_name is not None or tenant_name !="":
                    tmp_resource_info["tenant_name"]=tenant_name
                if vmuuid is not None or vmuuid !="":
                    tmp_resource_info["vmuuid"]=resource_id
                if node is not None or node !="":
                    tmp_resource_info["node"]=node
                if host_name is not None or host_name !="":
                    tmp_resource_info["host_name"]=host_name
                if image_ref_url is not None or image_ref_url !="":
                    tmp_resource_info["image_ref_url"]=image_ref_url
                if state is not None or state !="":
                    tmp_resource_info["state"]=state
                if vcpus is not None or vcpus !="":
                    tmp_resource_info["vcpus"]=vcpus
                if memory_mb is not None or memory_mb !="":
                    tmp_resource_info["memory_mb"]=memory_mb
                if disk_gb is not None or disk_gb !="":
                    tmp_resource_info["disk_gb"]=disk_gb
                if hep_spec is not None or hep_spec !="":
                    tmp_resource_info["hep_spec"]=hep_spec
                if created_at is not None or created_at !="":
                    tmp_resource_info["created_at"]=created_at
                if launched_at is not None or launched_at !="":
                    tmp_resource_info["launched_at"]=launched_at
                if deleted_at is not None or deleted_at !="":
                    tmp_resource_info["deleted_at"]=deleted_at
                if terminated_at is not None or terminated_at !="":
                    tmp_resource_info["terminated_at"]=terminated_at
                if counter_name is not None and counter_name !="":
                    tmp_metric_info["counter_name"]=counter_name
                if counter_volume is not None and counter_volume !="":
                    tmp_metric_info["counter_volume"]=counter_volume
                if counter_type is not None and counter_type !="":
                    tmp_metric_info["counter_type"]=counter_type
                if counter_unit  is not None and counter_unit !="":
                    tmp_metric_info["counter_unit"]=counter_unit
                if source is not None and source !="":
                    tmp_metric_info["source"]=source
                if sample_time is not None and sample_time !="":
                    tmp_metric_info["sample_time"]=sample_time


                try:
                    sorted_resource_table[resource_id]
                    try:
                        sorted_resource_table[resource_id]["net_out_resource_info"]
                        metric_list= sorted_resource_table[resource_id]["net_out_metric_info"]
                        if tmp_metric_info not in  metric_list:
                            metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["net_out_metric_info"]=metric_list
                    except:
                        sorted_resource_table[resource_id]["net_out_resource_info"]=tmp_resource_info
                        metric_list=[]
                        metric_list.append(tmp_metric_info)
                        sorted_resource_table[resource_id]["net_out_metric_info"]=metric_list
                except:
                    sorted_resource_table[resource_id]={}
                    sorted_resource_table[resource_id]["net_out_resource_info"]=tmp_resource_info
                    metric_list=[]
                    metric_list.append(tmp_metric_info)
                    sorted_resource_table[resource_id]["net_out_metric_info"]=metric_list
    return sorted_resource_table

#
# main starts here
#

today=date.today()
yesterday = date.today() - timedelta(1)
yesterday=str(yesterday)
today=str(today)
aparser = argparse.ArgumentParser(description='Wrapper for ceilodatapoll')
aparser.add_argument('-d', '--debug', dest='debug', action='store_true', help='Produce debugging output',default=False)
aparser.add_argument('-t', '--time', dest='yesterday', action='store',help='Day to process. Must be in the past. Format: yyyy-mm-dd',default=yesterday)
args = aparser.parse_args()
yesterday=args.yesterday
debug = args.debug
debug = True
hep_spec_data_id,hep_spec_data_name=getHepSpecData()
config = read_config()
mysql_url=""

""" First, create logger, add a file handler,
    create a formatter and set the formatter for the handler
    and finally add the handler to the logger
    CRITICAL - 50, ERROR - 40, WARNING - 30, INFO - 20,
    DEBUG - 10, NOTSET - 0
"""
start_time = None
end_time = None
try:
    secrets = config["secrets"]
    try:
        landb_user_name=secrets["landb_user_name"]
        landb_password=secrets["landb_password"]
    except KeyError:
        print >>sys.stderr,"ERROR:LAN_DB user name and password not set"
except:
    print >> sys.stderr, "ERROR: No secrets defined in the configuration file"

try:
    database_info=config["database"]
    try:
        mysql_user_name=database_info["user"]
        mysql_password=database_info["password"]
        database_name=database_info["database_name"]
        mysql_url="mysql://"+mysql_user_name+":"+mysql_password+"@localhost:3306/"+database_name
    except:
        print >> sys.stderr, "ERROR: My sql user name and password has not been properly set"

except:
     print >> sys.stderr, "ERROR: No database info in the file"

try:
    config_parameters = config["config_parameters"]
except:
    if (verbose):
        print >> sys.stderr, "INFO: No configuration parametes defined in the configuration file"
try:
    ceilodatapoll=config_parameters["ceilo_data_poll_pgm"]
    ceilo_data_store_log_file=config_parameters["ceilo_data_store_log_file"]
except KeyError:
    print >> sys.stderr, "ERROR: CEILO_DATA_STORE configuration parameters not set"
    sys.exit(1)
if (debug):
    log_level=logging.DEBUG
else:
    log_level=logging.ERROR
lgr = logging.getLogger('ceilo_data_store_script')
lgr.setLevel(log_level)
fh = logging.FileHandler(ceilo_data_store_log_file)
fh.setLevel(log_level)
frmt = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(frmt)
lgr.addHandler(fh)
# Calculate the Time Period to poll the ceilometer
lgr.debug('The ceilometer Polling will start')

ceilometerconf = "/etc/ceilodata.conf"
req_attributes = ["user_id", "project_id", "resource_id", "node","name",
                     "display_name","vmuuid","instance_id","image.name",
                     "state","vcpus","memory_mb","disk_gb","created_at","launched_at",
                     "deleted_at","terminated_at","counter_name", "source", "counter_unit",
                      "counter_volume", "counter_type", "timestamp"]

# The Accounting Logic starts from here

time_list=[]
# 3h slots only now ! 
tmp_time_list=[yesterday+" 00:00:00",yesterday+" 02:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 03:00:00",yesterday+" 05:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 06:00:00",yesterday+" 08:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 09:00:00",yesterday+" 11:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 12:00:00",yesterday+" 14:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 15:00:00",yesterday+" 17:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 18:00:00",yesterday+" 21:59:59"]
time_list.append(tmp_time_list)
tmp_time_list=[yesterday+" 21:00:00",yesterday+" 23:59:59"]
time_list.append(tmp_time_list)

for tmp_list in time_list:
    start_time=tmp_list[0]
    end_time=tmp_list[1]
    lgr.debug('Start Time: %s and End Time: %s', start_time, end_time)
    # Call the ceilodatapoll script and get the samples in json format
    p = subprocess.Popen([ceilodatapoll, '-c', ceilometerconf, '-s',
                                   str(start_time), '-e', str(end_time)],
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    """ The output will provide the json data and
    the error will have any error that caused
    the ceilometer script call failure
    """

    out, err = p.communicate()
    if err != "":
        lgr.error(err)
        sys.exit(0)
    if out == "":
        lgr.debug('No Samples found for this duration')
        sys.exit(0)

    # Get the JSON output and put them in a data structure
    data = None
    try:
        data = json.loads(out)
    except ValueError:
        lgr.error('The output is not in correct JSON format')
        sys.exit(0)
    tenant_info=data["t_info"]
    ceilo_data=data["c_data"]
    ceilo_data_per_tenant={}
    for tenant_id in ceilo_data.iterkeys():
        ceilo_data_filtered={}
        tenant_data=ceilo_data[tenant_id]
        try:
            tenant_name=tenant_info[tenant_id]
        except:
            lgr.debug("Error occured while finding the tenant id")
        respource_info={}
        for counter_name in tenant_data.iterkeys():
            resource_data=tenant_data[counter_name]
            tmp_resource_info=[]
            if resource_data:
                for one_sample in resource_data:
                    req_data = [None,None,None,None,None,None,
                                                  None, None, None,None,None,
                                                  None, None, None,None,None,
                                                  None, None, None,None,None,
                                                  None,None]
                    for attr_name in one_sample:

                        try:
                            if attr_name == 'resource_metadata':
                                for meta_data_name in one_sample[attr_name]:
                                    try:
                                        index = req_attributes.index(meta_data_name)
                                        req_data[index] = one_sample[attr_name][meta_data_name]
                                        if(meta_data_name=="resource_id"):
                                            resource_id=req_data[index]
                                    except ValueError:
                                        pass
                            else:
                                index = req_attributes.index(attr_name)
                                req_data[index] = one_sample[attr_name]
                        except:
                            pass

                    # Logic for finding the hep_spec value from node name starts here
                    """node gives the host name which inturn gives the serial number
                    hep_spec value is found out from hep_spec_data which holds the
                    serial number-hep_spec mapping
                    """
                    node=req_data[3]

                    hep_spec_value=None
                    if node is not None and  node !="" and node!="None":
                        try:
                            hostname=node.split(".")[0]
                            serial_number=landbquery.getSerialNumber(landb_user_name,landb_password,hostname)
                            if serial_number is not None:
                                serial_number=serial_number.replace("-"," ",1)
                                try:
                                    hep_spec_value=hep_spec_data_id[serial_number]
                                except KeyError:
                                    print >> sys.stderr, "ERROR: Serial Number,"+ serial_number+" has no entry in the hep-spec table "
                            else:
                                try:
                                    hep_spec_value=hep_spec_data_name[node]
                                except KeyError:
                                    print >> sys.stderr, "ERROR: Host has no entry in the hep-spec table" 
                        except:
                            print >> sys.stderr, "ERROR: Error Occured during HEP-SPEC Calculation"

                    req_data.append(hep_spec_value)
                    req_data.append(tenant_id)
                    req_data.append(tenant_name)
                    tmp_resource_info.append(req_data)
            ceilo_data_filtered[counter_name]=tmp_resource_info
        ceilo_data_per_tenant[tenant_id]=ceilo_data_filtered
    sorted_resource_data=get_sorted_resource_data(ceilo_data_per_tenant)
    store_sorted_resource_data(sorted_resource_data,start_time,end_time,lgr)
    lgr.debug('Done with database update')

#Now update daily_resouce_record table from metric_data table
lgr.debug('Update daily_resource_record starts')
session=init_populate_daily_resource_record()
update_resource_record(1,session)
lgr.debug('Update daily_resource_record ends')
